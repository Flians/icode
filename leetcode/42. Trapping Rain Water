class Solution {
public:
    int trap_dp(vector<int>& height) {
        if (height.empty())
            return 0;
        int i=0, temp=0, sum=0;
        vector<int> l(height.size()), r(height.size());
        
        for(; i<height.size(); i++) {
            temp = max(temp, height[i]);
            l[i] = temp;
        }
        temp = 0;
        for(i=height.size()-1; i>=0; i—) {
            temp = max(temp, height[i]);
            r[i] = temp;
        }
        for(i=0; i<height.size(); i++) {
            sum += min(l[i], r[i]) - height[i];
        }
        return sum;
    }
    
    int trap(vector<int> &height) {
        int l = 0, r = height.size()-1;
        int res = 0, lmax = 0, rmax = 0;
        while (l < r) {
            if (height[l] < height[r]) {
                if (height[l] >= lmax) {
                    lmax = height[l++];
                } else {
                    res += lmax - height[l++];
                }
            } else {
                if (height[r] >= rmax) {
                    rmax = height[r—];
                } else {
                    res += rmax - height[r—];
                }
            }
        }
        return res;
    }
};